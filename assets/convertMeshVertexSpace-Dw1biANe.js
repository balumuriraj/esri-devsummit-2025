import{ac as p,a7 as m,aO as s}from"./index-BdTzoSyX.js";import{p as a}from"./MeshVertexAttributes-BLZ2WxAC.js";import{B as n}from"./vertexSpaceConversion-DBS45AQ3.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-CgkZzaUj.js";import"./computeTranslationToOriginAndRotation-CkrVPguw.js";import"./projectPointToVector-Dls3xE4T.js";import"./meshVertexSpaceUtils-MbpvQ4dC.js";import"./MeshLocalVertexSpace-CZc8Xjwc.js";import"./vec3-rxgYcXg5.js";import"./BufferView-CSryOQvR.js";import"./vec4-ueQh84B4.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
