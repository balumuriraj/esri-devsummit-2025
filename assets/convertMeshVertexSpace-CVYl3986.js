import{ac as p,a7 as m,aO as s}from"./index-CCasRUIN.js";import{p as a}from"./MeshVertexAttributes-ZHH7undV.js";import{B as n}from"./vertexSpaceConversion-DxhiOY_R.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-3uG47glO.js";import"./computeTranslationToOriginAndRotation-BWf8TM_C.js";import"./projectPointToVector-CsbvifDl.js";import"./meshVertexSpaceUtils-Cc_LTFxS.js";import"./MeshLocalVertexSpace-CdbW0z9P.js";import"./vec3-CAnrSJC1.js";import"./BufferView-BFWskoDl.js";import"./vec4-BQB9hcIJ.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
