const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/disjointOperator-DnuDPBVw.js","assets/ProjectionTransformation-BnkVBIoa.js","assets/SimpleGeometryCursor-B92kdZ15.js","assets/index-CCasRUIN.js","assets/index-4rsQkLC1.css","assets/jsonConverter-C24B79eG.js","assets/intersectsOperator-EuZbMat3.js","assets/OperatorIntersects-Bl8WBZDB.js","assets/touchesOperator-QjuO8oST.js","assets/OperatorTouches-BNsNrksB.js","assets/crossesOperator-XQyQRCDl.js","assets/OperatorCrosses-tjGdINvt.js","assets/withinOperator-CITi0PFt.js","assets/OperatorWithin-DsoVpsLd.js","assets/containsOperator-w3OPRPXg.js","assets/overlapsOperator-9Npx2WkO.js","assets/OperatorOverlaps-Dk8ndSgz.js","assets/OperatorGeodeticLength-Dt6gpSiK.js","assets/MapImageLayer-BVG6PhbL.js","assets/QueryTask-D8hx0Y3Y.js","assets/query-Bb8GNNrv.js","assets/pbfQueryUtils-Dp5ijlqP.js","assets/pbf-CcUfFpaw.js","assets/memoryEstimations-XpIXu6m4.js","assets/OptimizedGeometry-W9iDIloo.js","assets/OptimizedFeatureSet-BySVQm4M.js","assets/executeQueryJSON-C9J4R_di.js","assets/featureConversionUtils-DG--BN25.js","assets/SceneLayerWorker-CqqwZCbW.js","assets/MeshLocalVertexSpace-CdbW0z9P.js","assets/vec3-CAnrSJC1.js","assets/projectVectorToVector-CoL21o2h.js","assets/projectPointToVector-CsbvifDl.js","assets/sphere-CA-5SYw6.js","assets/mat3f64-q3fE-ZOt.js","assets/plane-DC7tgE9D.js","assets/mat4f64-Dk4dwAN8.js","assets/quatf64-aQ5IuZRd.js","assets/I3SBinaryReader-CH9byT-C.js","assets/VertexAttribute-Cq4MnHjR.js","assets/edgeUtils-Q-kNT7go.js","assets/floatRGBA-C6fWWT-b.js","assets/NormalAttribute.glsl-DNucGW3Q.js","assets/glsl-BH37Aalp.js","assets/ShaderOutput-DnYY5J1_.js","assets/BindType-BBwFZqyN.js","assets/orientedBoundingBox-C0vAKTcX.js","assets/quat-B58fUHkx.js","assets/spatialReferenceEllipsoidUtils-3uG47glO.js","assets/computeTranslationToOriginAndRotation-BWf8TM_C.js","assets/popupUtils-NlxQmt5B.js","assets/associatedFeatureServiceUtils-Brlt-VTO.js","assets/SketchOptions-VqAfPbyS.js","assets/geodesicUtils-Dn5u4cJ-.js","assets/utils-Bd2Oa3Rp.js","assets/quantizationUtils-CEM-XgEu.js","assets/FeatureLayerSource-DuOOqZEG.js","assets/meshVertexSpaceUtils-Cc_LTFxS.js","assets/External-w9mZRFRU.js","assets/MeshTransform-DNIYtyfU.js","assets/axisAngleDegrees-7w5gWKnW.js","assets/editingSupport-D4NAI69H.js","assets/clientSideDefaults-AsnWcuHN.js","assets/QueryEngineCapabilities-B_pTbIiR.js","assets/layersCreator-BCaVxLw-.js","assets/loadUtils-DSDmaklo.js","assets/fetchService-BTqS3yAx.js","assets/lazyLayerLoader-CuZ13ZGo.js","assets/portalLayers-BKPSlzUo.js","assets/saveUtils-Dm9AB9GR.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/ImageryTileLayerView2D-C8bYbgXK.js","assets/RasterVFDisplayObject-ClWo_jNP.js","assets/VertexArrayObject-BE_UeYb1.js","assets/VertexElementDescriptor-BLyltQyJ.js","assets/dataUtils-vj_cSZ2R.js","assets/WGLContainer-B5qjCnAQ.js","assets/dataViewUtils-B7UbnxDp.js","assets/BoundingBox-Ck_0T0bt.js","assets/ProgramTemplate-DgFCCuum.js","assets/vec3f32-nZdmKIgz.js","assets/Container-t6WLSGQe.js","assets/config-CKZ6K-Ri.js","assets/earcut-D9gy186-.js","assets/LayerView-SggrsYJk.js","assets/rasterUtils-GglxJ1vw.js","assets/VertexStream-eQ6dxpCe.js","assets/utils-l99LVrZ4.js","assets/FramebufferObject-CsnKGiBy.js","assets/TileContainer-DudTFQgK.js","assets/rasterProjectionHelper-D0g-2Gv_.js","assets/timeSupport-Cpw-Afon.js","assets/RefreshableLayerView-akuVIWN9.js","assets/RasterWorker-DYLltFgF.js","assets/_commonjsHelpers-DCkdB7M8.js","assets/ElevationLayer-C7IBrjMM.js","assets/WorkerHandle-Ny6eBZma.js","assets/editingTools-C7E8e4Jv.js","assets/interfaces-DXvCqfhl.js","assets/VerticalOffset.glsl-CUGHQ5-3.js","assets/Indices-DAC-tmc9.js","assets/InterleavedLayout-BXidN2-6.js","assets/BufferView-BFWskoDl.js","assets/triangle-DUlWus67.js","assets/lineSegment-4wjH6G2N.js","assets/renderState-ChA8KnxB.js","assets/boundedPlane-D5HzG0LR.js","assets/requestImageUtils-DUvv2hBj.js","assets/TextureFormat-1mYWTFa-.js","assets/ShaderBuilder-DyTQgr8N.js","assets/triangulationUtils-BaSuHXc4.js","assets/deduplicate--r6f5Q5X.js","assets/RibbonLine.glsl-DehupRkM.js","assets/HUDVisibility.glsl-C6iSIq9N.js","assets/doublePrecisionUtils-B0owpBza.js","assets/hydratedFeatures-Bc0vz6UQ.js","assets/Octree-DwLnbmeJ.js","assets/HUDMaterial.glsl-CCcJuLvE.js","assets/NestedMap-GuqgquCN.js","assets/RouteLayerInteraction-DUVMWxRw.js","assets/GraphicsLayer-R_dqldM1.js","assets/RouteLayerView2D-CTELVKDW.js","assets/GraphicContainer-BmJ5tdAP.js","assets/AGraphicContainer-BCaT68D6.js","assets/TechniqueInstance-gtOZ8gLR.js","assets/UpdateTracking2D-BQJMCJnF.js","assets/FeatureCommandQueue-DuzuizWX.js","assets/CIMSymbolHelper-C-PNUGx1.js","assets/BidiEngine-QXap_35O.js","assets/fontUtils-CpwBOD2U.js","assets/Rect-CND4lKvw.js","assets/rasterizingUtils-BtVmLiFr.js","assets/TechniqueType-uMFRS8dR.js","assets/GraphShaderModule-lx78Pxat.js","assets/QueueProcessor-9E1AR8Dw.js","assets/GraphicsView2D-DEb6cU3H.js","assets/OverrideHelper-BFr5-Efp.js","assets/FeatureMetadata-85pzlv7s.js","assets/queryUtils-mxa1_Aw5.js","assets/json-Wa8cmqdu.js","assets/timeSupport-BC7Fc8xc.js","assets/TimeOnly-BeIN966s.js","assets/dehydratedFeatures-B_DgQ-a8.js","assets/automaticLengthMeasurementUtils-CfMzBTos.js","assets/memoize-DmxaQ-k8.js","assets/geodesicLengthMeasurementUtils-Ct4aKs9p.js","assets/geometryEngineBase-B0ZyeKAX.js","assets/hydrated-OQlVY2eD.js","assets/glUtil-DvuvX8rT.js","assets/automaticAreaMeasurementUtils-DM-wsW5M.js","assets/PointSnappingHint-CPQ6tTY4.js","assets/editPlaneUtils-CaFGf9Mp.js","assets/ReactiveSet-DX2QBHZn.js","assets/SelectedVertexTooltipInfo-ptR9MP2n.js","assets/TranslateTooltipInfo-C16YQRom.js","assets/ExtentScaleTooltipInfo-BMWzUDYC.js","assets/GraphicManipulator-D3Wy7gmW.js","assets/drapedUtils-Dppiwm9S.js","assets/KMLLayerView2D-i4jI7mz-.js","assets/BitmapTechnique-Dc25qTsv.js","assets/BitmapContainer-qcNS5yZy.js","assets/MaterialPrograms-CLR0KQyh.js","assets/webglDeps-c3yI9a2o.js","assets/testSVGPremultipliedAlpha-DMU9LCDN.js","assets/FeatureLayerView2D-DTfM8K_w.js","assets/AttributeBinsFeatureSet-CFaLL5US.js","assets/AttributeBinsQuery-COzpwK_v.js","assets/FixedIntervalBinParameters-CyiwYAkT.js","assets/CircularArray-CujHzHWW.js","assets/SDFHelper-DI0RBIgG.js","assets/parquet-CanranXy.js","assets/knowledgegraph-B5ARK9HH.js","assets/arcade-MjNlzZF_.js","assets/unitConversion-BOFUXCl3.js","assets/ImmutableArray-BPVd6ESQ.js","assets/shared-DJe_-sJH.js","assets/number-DwwUc6ea.js","assets/WhereClause-BxKF9q8u.js","assets/portalUtils-CAyvw0MI.js","assets/executeQueryForSnapping-DYz6RGzF.js","assets/PooledRBush-CtvaHitF.js","assets/optimizedFeatureQueryEngineAdapter-PN0-4Fl_.js","assets/QueryEngine-DhJb9WSU.js","assets/WhereClauseCache-C_tyPnsp.js","assets/SnappingCandidate-DGkpYqI6.js","assets/MemorySourceWorker-Cz-N8hHa.js","assets/sourceUtils-BzHCShhb.js","assets/date-Ctp1FiBW.js","assets/MediaLayerView2D-N6CaEYVh.js","assets/enums-BRzLM11V.js","assets/GridShader-DFKs3E4o.js","assets/PieChartMeshWriter-CXawq4_F.js","assets/libtess-BPfI4qTa.js","assets/utils-BzfqwBvk.js","assets/grouping-CnNyuMqa.js","assets/OverlayContainer-CNTRJYbM.js","assets/utils-ehcGqGxa.js","assets/FeaturePipelineWorker-DX2y_rX2.js","assets/MeshWriterRegistry-B8phN5kx.js","assets/operatorGeodeticDensify-CkPBsvgW.js","assets/geodeticCurveType-CirnHLSB.js","assets/geojson-CiROkDV-.js","assets/PointCloudWorker-CH9N2Jnq.js","assets/uploadAssets-BZnXq7D5.js","assets/meshFeatureAttributes-Cw3Eagre.js","assets/SourceLayerData-Dhzsd2m5.js","assets/VideoLayerView2D-Dd3p3cQx.js","assets/webdocSaveUtils-CKeU3bai.js","assets/basemapUtils-BhLAYO9e.js","assets/resourceUtils-ChGPyRVz.js","assets/WFSSourceWorker-B35XjjxU.js","assets/WMSLayerView2D-mJHMBuid.js","assets/ExportStrategy-DSo490d5.js","assets/operators-CkMqlQZs.js","assets/apiConverter-Bazampn-.js","assets/operatorGeodesicBuffer-HOrZqk7k.js","assets/operatorBuffer-BjzHFmg2.js","assets/GeometryCleaner-BEJM7I4l-CP489GXS.js","assets/operatorConvexHull-CffrZkUr.js","assets/operatorIntersection-BYvWBiPf.js","assets/operatorOffset-C599CrCU.js","assets/operatorSimplify-Cfxt8g0t.js","assets/operatorUnion-Bo0NLdHa.js","assets/MeshComponent-BNpJA8Yy.js","assets/meshProperties-C4iW0Ukm.js","assets/MeshVertexAttributes-ZHH7undV.js","assets/vec4-BQB9hcIJ.js","assets/loader-z18g9DVS.js","assets/objectResourceUtils-BR8rlZ_-.js","assets/RealisticTree.glsl-CAA6M_hp.js","assets/vertexSpaceConversion-DxhiOY_R.js","assets/featureLayerUtils-U-_dOUEK.js","assets/intersectionOperator-YdmWC1CC.js","assets/unionOperator-DfHCtEuD.js","assets/lengthOperator-CEgpWTVr.js","assets/bufferOperator-CSBGbaA1.js","assets/geodesicBufferOperator-CdFPO0vf.js","assets/offsetOperator-UYsoWLhm.js","assets/simplifyOperator-_R3B3Qlz.js","assets/convexHullOperator-CIYb4Rgq.js"])))=>i.map(i=>d[i]);
import{bZ as a,cV as c}from"./index-CCasRUIN.js";function _(t,e){let o;return{loaded:!1,load:()=>o??(o=e().then(n=>{p[t]={loaded:!0,execute:n}}))}}function s(t){return t==null?null:t.toJSON()}const p={disjoint:_("disjoint",()=>a(()=>import("./disjointOperator-DnuDPBVw.js"),__vite__mapDeps([0,1,2,3,4,5])).then(t=>t.execute)),intersects:_("intersects",()=>a(()=>import("./intersectsOperator-EuZbMat3.js"),__vite__mapDeps([6,7,1,2,3,4,5])).then(t=>t.execute)),touches:_("touches",()=>a(()=>import("./touchesOperator-QjuO8oST.js"),__vite__mapDeps([8,9,1,2,3,4,5])).then(t=>t.execute)),crosses:_("crosses",()=>a(()=>import("./crossesOperator-XQyQRCDl.js"),__vite__mapDeps([10,11,1,2,3,4,5])).then(t=>t.execute)),within:_("within",()=>a(()=>import("./withinOperator-CITi0PFt.js"),__vite__mapDeps([12,13,1,2,3,4,5])).then(t=>t.execute)),contains:_("contains",()=>a(()=>import("./containsOperator-w3OPRPXg.js"),__vite__mapDeps([14,1,2,3,4,5])).then(t=>t.execute)),overlaps:_("overlaps",()=>a(()=>import("./overlapsOperator-9Npx2WkO.js"),__vite__mapDeps([15,16,1,2,3,4,5])).then(t=>t.execute)),equals:_("equals",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.J),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o))}),relate:_("relate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.$),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>t.execute(c(e),c(o),n)}),intersection:_("intersection",()=>a(()=>import("./intersectionOperator-YdmWC1CC.js"),__vite__mapDeps([232,3,4,219,2,1,5])).then(t=>t.execute)),union:_("union",()=>a(()=>import("./unionOperator-DfHCtEuD.js"),__vite__mapDeps([233,222,2,1,3,4,5])).then(t=>t.executeMany)),difference:_("difference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.F),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),symmetricDifference:_("symmetricDifference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.a0),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),clip:_("clip",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),cut:_("cut",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.A),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o)).map(n=>s(n))}),area:_("area",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(n=>n.x),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toAreaUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toAreaUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toAreaUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(c(n));return e(n.spatialReference,o(r),i)}}),geodeticArea:_("geodeticArea",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(r=>r.Q),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,squareMeters:o,toAreaUnit:n}=await a(async()=>{const{convert:r,squareMeters:i,toAreaUnit:u}=await import("./unitConversion-BOFUXCl3.js").then(E=>E.e);return{convert:r,squareMeters:i,toAreaUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),length:_("length",async()=>{const t=await a(()=>import("./lengthOperator-CEgpWTVr.js"),__vite__mapDeps([234,3,4,5,1,2])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(n);return e(n.spatialReference,o(r),i)}}),geodeticLength:_("geodeticLength",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(r=>r.Y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-BOFUXCl3.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),distance:_("distance",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(n=>n.H),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>{const u=t.execute(c(n),c(r));return e(n.spatialReference,o(i),u)}}),densify:_("densify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(n=>n.E),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r)))}),geodeticDensify:_("geodeticDensify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(r=>r.X),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-BOFUXCl3.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),s(t.execute(c(r),i)))}),generalize:_("generalize",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(n=>n.N),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r,u)))}),buffer:_("buffer",async()=>{const t=await a(()=>import("./bufferOperator-CSBGbaA1.js"),__vite__mapDeps([235,3,4,216,2,1,217,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r))}),geodesicBuffer:_("geodesicBuffer",async()=>{const t=await a(()=>import("./geodesicBufferOperator-CdFPO0vf.js"),__vite__mapDeps([236,3,4,215,2,200])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-BOFUXCl3.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),t.execute(r,i))}),offset:_("offset",async()=>{const t=await a(()=>import("./offsetOperator-UYsoWLhm.js"),__vite__mapDeps([237,3,4,220,2,1,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-BOFUXCl3.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r,u))}),rotate:_("rotate",async()=>{const t=await a(()=>import("./operators-CkMqlQZs.js").then(o=>o.Z),__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13])),{default:e}=await a(async()=>{const{default:o}=await import("./operators-CkMqlQZs.js").then(n=>n.Y);return{default:o}},__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13]));return(o,n,r,i)=>{const u=new e().rotate(n,r,i);return s(t.execute(c(o),u))}}),centroid:_("centroid",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),labelPoint:_("labelPoint",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e.Z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),simplify:_("simplify",()=>a(()=>import("./simplifyOperator-_R3B3Qlz.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.execute)),isSimple:_("isSimple",()=>a(()=>import("./simplifyOperator-_R3B3Qlz.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.isSimple)),convexHull:_("convexHull",()=>a(()=>import("./convexHullOperator-CIYb4Rgq.js"),__vite__mapDeps([239,218,2,1,3,4,5])).then(t=>t.execute)),getNearestCoordinate:_("getNearestCoordinate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e._),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>{const r=t.getNearestCoordinate(c(e),c(o),n);return{...r,coordinate:s(r.coordinate)}}}),getNearestVertex:_("getNearestVertex",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-Dt6gpSiK.js").then(e=>e._),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>{const n=t.getNearestVertex(c(e),c(o));return{...n,coordinate:s(n.coordinate)}}})};function d(t,e){const o=p[t];return o.loaded?o.execute.apply(void 0,e):o.load().then(()=>d(t,e))}export{d as invokeGeometryOp};
