import{a7 as d,c6 as Z,bx as x,iH as ee,dL as M,aa as se,lk as D,ll as I,ae as w,af as m,ac as l,gv as te,lm as oe,ln as ne,lo as re,bI as ae,gw as ie,lp as ce,bb as le,lq as ue,bp as pe,gn as de,a9 as fe}from"./index-BdTzoSyX.js";import{m as me,N as ge,b as he,a as k,i as R}from"./External-BfeX_35b.js";import{N as we}from"./MeshTransform-PLs3wxGa.js";import{i as ye,n as be}from"./meshFeatureAttributes-6ZTnpIxu.js";const y="upload-assets",b=()=>new Error;class Pe extends d{constructor(){super(`${y}:unsupported`,"Layer does not support asset uploads.",b())}}let Te=class extends d{constructor(){super(`${y}:no-glb-support`,"Layer does not support glb.",b())}},$e=class extends d{constructor(){super(`${y}:no-supported-source`,"No supported external source found",b())}};class ve extends d{constructor(){super(`${y}:not-base-64`,"Expected gltf data in base64 format after conversion.",b())}}let Ae=class extends d{constructor(){super(`${y}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",b())}},xe=class extends d{constructor(s,e){super(`${y}:bad-response`,`Bad response. Uploaded ${s} items and received ${e} results.`,b())}};class Me extends d{constructor(s,e){super(`${y}-layer:upload-failed`,`Failed to upload mesh file ${s}. Error code: ${(e==null?void 0:e.code)??"-1"}. Error message: ${(e==null?void 0:e.messages)??"unknown"}`,b())}}let U=class extends d{constructor(s){super(`${y}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${s}, but it does not list it in its supported formats.`,b())}},Ne=class extends d{constructor(){super(`${y}:convert3D-failed`,"convert3D failed.")}},ys=class extends d{constructor(){super("invalid-input:no-model","No supported model found")}},Ps=class extends d{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}};function je(t){const s=1/Z(t,1);return s!==1?new we({scale:[s,s,s]}):void 0}const N={uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function P(t,s=o=>{},e){return new Fe(t,s,e)}let Fe=class{constructor(s,e=n=>{},o){if(this.onProgress=e,this.taskName=o,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof s=="number"){this._weights={};for(let n=0;n<s;n++){const r=n,a=1/s;this._weights[r]=a,this._progressMap.set(r,0)}}else this._weights=s;this.emitProgress()}emitProgress(){let s=0;for(const[e,o]of this._progressMap.entries())s+=o*this._weights[e];if(s===1&&x("enable-feature:esri-3dofl-upload-timings")){const e=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${e} sec`);for(const[o,n]of this._timingsMap){const r=Math.round(n.end-n.start)/1e3,a=Math.round(r/e*100);console.log(this.taskName??"Task",{stepKey:o,stepTime:r,relativeTime:a})}}this.onProgress(s)}setProgress(s,e){if(this._progressMap.set(s,e),x("enable-feature:esri-3dofl-upload-timings")){const o=performance.now();this._startTime??(this._startTime=o);const n=ee(this._timingsMap,s,()=>({start:o,end:0}));e===1&&(n.end=o)}this.emitProgress()}simulate(s,e){return C(o=>this.setProgress(s,o),e)}makeOnProgress(s){return e=>this.setProgress(s,e)}};function C(t=e=>{},s=ke){const e=performance.now();t(0);const o=setInterval(()=>{const n=performance.now()-e,r=1-Math.exp(-n/s);t(r)},Ie);return se(()=>{clearInterval(o),t(1)})}function _e(t,s=Se){return D(I(t*O/s))}function Ee(t,s=De){return D(I(t*O/s))}const Se=10,De=10,O=8e-6,Ie=M(50),ke=M(1e3),q=1e6,S=20*q,Re=2e9,Ue=3;async function Ce({data:t,name:s,description:e},o,n){let r=null;try{const a=w(o,"uploads"),i=w(a,"info"),{data:u}=await m(i,{query:{f:"json"},responseType:"json"});l(n);const g=te(o),h=u.maxUploadFileSize*q,f=g?Re:h,c=g?Math.min(S,h):S;if(t.size>f)throw new Error("Data too large");const G=w(a,"register"),{data:j}=await m(G,{query:{f:"json",itemName:Oe(s),description:e},responseType:"json",method:"post"});if(l(n),!j.success)throw new Error("Registration failed");const{itemID:J}=j.item;r=w(a,J);const K=w(r,"uploadPart"),F=Math.ceil(t.size/c),T=new Array;for(let p=0;p<F;++p)T.push(t.slice(p*c,Math.min((p+1)*c,t.size)));const $=T.slice().reverse(),_=new Array,Q=P(F,n==null?void 0:n.onProgress,"uploadItem"),V=async()=>{for(;$.length!==0;){const p=T.length-$.length,v=$.pop(),A=new FormData,X=Q.simulate(p,_e(v.size));try{A.append("f","json"),A.append("file",v),A.append("partId",`${p}`);const{data:Y}=await m(K,{timeout:0,body:A,responseType:"json",method:"post"});if(l(n),!Y.success)throw new Error("Part upload failed")}finally{X.remove()}}};for(let p=0;p<Ue&&$.length!==0;++p)_.push(V());await Promise.all(_);const W=w(r,"commit"),{data:E}=await m(W,{query:{f:"json",parts:T.map((p,v)=>v).join(",")},responseType:"json",method:"post"});if(l(n),!E.success)throw new Error("Commit failed");return E.item}catch(a){if(r!=null){const i=w(r,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Oe(t){return t.replaceAll("/","_").replaceAll("\\","_")}async function qe(t,s,e){var r;const o=t.length;if(!o)return(r=e==null?void 0:e.onProgress)==null||r.call(e,1),[];const n=P(o,e==null?void 0:e.onProgress,"uploadAssets");return Promise.all(t.map((a,i)=>Be(a,s,{...e,onProgress:n.makeOnProgress(i)})))}async function Be(t,{layer:s,ongoingUploads:e},o){var a;const n=e.get(t);if(n)return n;if(!rs(s))throw new Pe;if(Le(t,s))return(a=o==null?void 0:o.onProgress)==null||a.call(o,1),t;const r=ze(t,s,o);e.set(t,r);try{await r}finally{e.delete(t)}return t}function Le(t,s){const{parsedUrl:e}=s;return e!=null&&t.metadata.externalSources.some(o=>me(o,e))}async function ze(t,s,e){const{metadata:o}=t,{displaySource:n}=o,r=B(n==null?void 0:n.source,s,{checkForConversionRequired:x("enable-feature:georeferenced-uploads")}),a=r!=null?He(r,s,e):o.externalSources.length>0?Ge(t,s,e):Je(t,s,e),i=await a;return l(e),t.addExternalSources([i]),t}async function He(t,s,e){return{source:await L(t,s,e),original:!0,unitConversionDisabled:!0}}async function Ge(t,s,e){const o=H(s),{externalSources:n}=t.metadata,r=Qe(n,s);if(!r)throw new $e;const a=P(N.uploadConvertibleSource,e==null?void 0:e.onProgress,"uploadConvertibleSource"),i=await L(r,s,{onProgress:a.makeOnProgress("uploadEditSource")});t.addExternalSources([{source:i,original:!0}]);const u=r.reduce((h,{asset:f})=>f instanceof File?h+f.size:h,0),g=a.simulate("serviceAssetsToGlb",Ee(u));try{const{source:h,transform:f,origin:c}=await ss(i,s,o);return t.transform=f,c&&(t.metadata.georeferenced=!0,e!=null&&e.useAssetOrigin&&(t.vertexSpace.origin=[c.x,c.y,c.z??0],t.spatialReference=c.spatialReference)),{source:h,unitConversionDisabled:!0}}finally{g.remove()}}async function Je(t,s,e){const o=P(N.uploadLocalMesh,e==null?void 0:e.onProgress,"uploadLocalMesh"),n=Ke(t,s,{...e,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await z([n],s,{...e,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:t.extent.clone(),original:!0}}async function Ke(t,s,e){const o=H(s),n=await t.load(e),r=await n.toBinaryGLTF({origin:n.origin,signal:e==null?void 0:e.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(e),{blob:new Blob([r],{type:"model/gltf-binary"}),assetName:`${ae()}.glb`,assetType:o}}function Qe(t,s){for(const e of t){const o=B(e.source,s);if(o)return o}return null}function B(t,{infoFor3D:s},e={}){if(!t)return null;const{supportedFormats:o,editFormats:n}=s,r=ge(t),a=new Array,i=oe(s),u=ne(s);let g=!1;for(const h of r){const f=Ve(h,o);if(!f)return null;const{assetType:c}=f;if(e.checkForConversionRequired&&(c===i||c===u))return null;n.includes(c)&&(g=!0),a.push(f)}return g?a:null}function Ve(t,s){const e=he(t,s);return e?{asset:t,assetType:e}:null}async function L(t,s,e){return z(t.map(o=>We(o,e)),s,e)}async function z(t,s,e){const o=P(N.uploadAssetBlobs,e==null?void 0:e.onProgress,"uploadAssetBlobs"),n=await Ye(t,s,{...e,onProgress:o.makeOnProgress("prepareAssetItems")});l(e);const r=n.map(({item:i})=>i),{uploadResults:a}=await Ze(r,s,{...e,onProgress:o.makeOnProgress("uploadAssetItems")});return l(e),t.map((i,u)=>es(n[u],a[u],s))}async function We(t,s){const{asset:e,assetType:o}=t;if(e instanceof File)return{blob:e,assetName:e.name,assetType:o};const n=await e.toBlob(s);return l(s),{blob:n,assetName:e.assetName,assetType:o}}async function Xe(t,s,e){const{blob:o,assetType:n,assetName:r}=t;let a=null;try{const i=await Ce({data:o,name:r},s.url,e);l(e),a={assetType:n,assetUploadId:i.itemID}}catch(i){pe(i),as().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!a){const i=await de(o);if(l(e),!i.isBase64)throw new ve;a={assetType:n,assetData:i.data}}if(!a)throw new Ae;return{item:a,assetName:r}}function Ye(t,s,e){const o=P(t.length,e==null?void 0:e.onProgress,"prepareAssetItems");return Promise.all(t.map(async(n,r)=>{const a=Xe(await n,s,{...e,onProgress:o.makeOnProgress(r)});return l(e),a}))}async function Ze(t,s,e){const o=C(e==null?void 0:e.onProgress);try{const n=await m(w(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(t)},method:"post",responseType:"json"});if(l(e),n.data.uploadResults.length!==t.length)throw new xe(t.length,n.data.uploadResults.length);return n.data}finally{o.remove()}}function es(t,s,e){const{success:o}=s;if(!o){const{error:g}=s;throw new Me(t.assetName,g)}const{assetHash:n}=s,{assetName:r,item:{assetType:a}}=t,{infoFor3D:{supportedFormats:i}}=e,u=ue(a,i);if(!u)throw new U(a);return new k(r,u,[new R(`${e.parsedUrl.path}/assets/${n}`,n)])}async function ss(t,s,e){var r;const o=t.map(({assetName:a,parts:i})=>({assetName:a,assetHash:i[0].partHash}));let n;try{const a=w(s.parsedUrl.path,"convert3D"),i=(r=s.capabilities)==null?void 0:r.operations.supportsAsyncConvert3D;n=(await(i?ns:os)(a,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:e,async:i},responseType:"json",timeout:0})).data}catch{throw new Ne}return ts(s,n)}function ts(t,s){const e={source:s.assets.map(o=>{const n=ce(o.contentType,t.infoFor3D.supportedFormats);if(!n)throw new U(n);return new k(o.assetName,o.contentType,[new R(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(x("enable-feature:georeferenced-uploads")&&s.transform){if(e.transform=ye(s.transform),s.spatialReference){const o=le.fromJSON(s.spatialReference);e.origin=be(s.transform,o)}}else e.transform=je(t.spatialReference);return e}function os(t,s){return m(t,s)}async function ns(t,s){const e=(await m(t,s)).data.statusUrl;for(;;){const o=(await m(e,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await ie(is)}}function rs(t){return!!t.infoFor3D&&!!t.url}function H({infoFor3D:t}){const s=re(t);if(!s)throw new Te;return s}function as(){return fe.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const is=M(1e3),vs=Object.freeze(Object.defineProperty({__proto__:null,uploadAssets:qe},Symbol.toStringTag,{value:"Module"}));export{ys as i,Ps as m,je as t,vs as u};
