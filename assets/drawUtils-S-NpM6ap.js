import{fl as k,fm as A,fn as B,au as H}from"./index-BdTzoSyX.js";function j(n,e,a,o){if(n.type==="point")return n.x+=e,n.y+=a,n.hasZ&&o!=null,n;if(n.type==="multipoint"){const x=n.points;for(let r=0;r<x.length;r++)x[r]=C(x[r],e,a,o);return n}if(n.type==="extent")return n.xmin+=e,n.xmax+=e,n.ymin+=a,n.ymax+=a,n;const m=k(n),t=n.type==="polyline"?n.paths:n.rings;for(let x=0;x<m.length;x++){const r=m[x];for(let s=0;s<r.length;s++)r[s]=C(r[s],e,a,o)}return"paths"in n?n.paths=t:n.rings=t,n}function J(n,e,a,o,m){const t=n.clone(),x=o.resolution;if(t.type==="point"){if(m)j(t,e*x,-a*x);else{const r=o.state.transform,s=o.state.inverseTransform,l=r[0]*t.x+r[2]*t.y+r[4],f=r[1]*t.x+r[3]*t.y+r[5];t.x=s[0]*(l+e)+s[2]*(f+a)+s[4],t.y=s[1]*(l+e)+s[3]*(f+a)+s[5]}return t}if(t.type==="multipoint"){if(m)j(t,e*x,-a*x);else{const r=t.points,s=o.state.transform,l=o.state.inverseTransform;for(let f=0;f<r.length;f++){const c=r[f],p=s[0]*c[0]+s[2]*c[1]+s[4],v=s[1]*c[0]+s[3]*c[1]+s[5],y=l[0]*(p+e)+l[2]*(v+a)+l[4],u=l[1]*(p+e)+l[3]*(v+a)+l[5];r[f]=Z(c,y,u)}}return t}if(t.type==="extent"){if(m)j(t,e*x,-a*x);else{const r=o.state.transform,s=o.state.inverseTransform,l=r[0]*t.xmin+r[2]*t.ymin+r[4],f=r[1]*t.xmin+r[3]*t.ymin+r[5],c=r[0]*t.xmax+r[2]*t.ymax+r[4],p=r[1]*t.xmax+r[3]*t.ymax+r[5];t.xmin=s[0]*(l+e)+s[2]*(f+a)+s[4],t.ymin=s[1]*(l+e)+s[3]*(f+a)+s[5],t.xmax=s[0]*(c+e)+s[2]*(p+a)+s[4],t.ymax=s[1]*(c+e)+s[3]*(p+a)+s[5]}return t}if(m)j(t,e*x,-a*x);else{const r=k(t),s=t.type==="polyline"?t.paths:t.rings,l=o.state.transform,f=o.state.inverseTransform;for(let c=0;c<r.length;c++){const p=r[c];for(let v=0;v<p.length;v++){const y=p[v],u=l[0]*y[0]+l[2]*y[1]+l[4],h=l[1]*y[0]+l[3]*y[1]+l[5],M=f[0]*(u+e)+f[2]*(h+a)+f[4],g=f[1]*(u+e)+f[3]*(h+a)+f[5];p[v]=Z(y,M,g)}}"paths"in t?t.paths=s:t.rings=s}return t}function K(n,e,a,o){if(n.type==="point"){const{x:y,y:u}=n,h=o?o[0]:y,M=o?o[1]:u,g=n.clone(),T=(y-h)*e+h,i=(u-M)*a+M;return g.x=T,g.y=i,g}if(n.type==="multipoint"){const y=k(n),u=A(),[h,M,g,T]=B(u,[y]),i=o?o[0]:(h+g)/2,q=o?o[1]:(T+M)/2,d=n.clone(),w=d.points;for(let b=0;b<w.length;b++){const z=w[b],[D,E]=z,F=(D-i)*e+i,G=(E-q)*a+q;w[b]=Z(z,F,G)}return d}if(n.type==="extent"){const{xmin:y,xmax:u,ymin:h,ymax:M}=n,g=o?o[0]:(y+u)/2,T=o?o[1]:(M+h)/2,i=n.clone();if(i.xmin=(y-g)*e+g,i.ymax=(M-T)*a+T,i.xmax=(u-g)*e+g,i.ymin=(h-T)*a+T,i.xmin>i.xmax){const q=i.xmin,d=i.xmax;i.xmin=d,i.xmax=q}if(i.ymin>i.ymax){const q=i.ymin,d=i.ymax;i.ymin=d,i.ymax=q}return i}const m=k(n),t=A(),[x,r,s,l]=B(t,m),f=o?o[0]:(x+s)/2,c=o?o[1]:(l+r)/2,p=n.clone(),v=p.type==="polyline"?p.paths:p.rings;for(let y=0;y<m.length;y++){const u=m[y];for(let h=0;h<u.length;h++){const M=u[h],[g,T]=M,i=(g-f)*e+f,q=(T-c)*a+c;v[y][h]=Z(M,i,q)}}return"paths"in p?p.paths=v:p.rings=v,p}function L(n,e,a,o,m,t){const x=Math.sqrt((a-n)*(a-n)+(o-e)*(o-e));return Math.sqrt((m-n)*(m-n)+(t-e)*(t-e))/x}function N(n,e,a,o=!1){const m=Math.atan2(e.y-a.y,e.x-a.x)-Math.atan2(n.y-a.y,n.x-a.x),t=Math.atan2(Math.sin(m),Math.cos(m));return o?t:H(t)}function C(n,e,a,o){return Z(n,n[0]+e,n[1]+a,n[2]!=null&&o!=null?n[2]+o:void 0)}function Z(n,e,a,o){const m=[e,a];return n.length>2&&m.push(n[2]),n.length>3&&m.push(n[3]),m}export{L as a,J as i,N as m,K as s};
