import{aa as s,ae as m,p}from"./CodeBlock-DBIw63CI.js";import{p as a}from"./MeshVertexAttributes-BKYpM7jM.js";import{B as n}from"./vertexSpaceConversion-DR_Oqnf_.js";import"./index-BYYG-xAB.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-BhfYBIg5.js";import"./computeTranslationToOriginAndRotation-DVeTEIZT.js";import"./projectPointToVector-CoPmnzvV.js";import"./meshVertexSpaceUtils-4Zq1VFQR.js";import"./MeshLocalVertexSpace-Bnv_Z6Nx.js";import"./vec3-mzinxiM7.js";import"./BufferView-DLlhWng3.js";import"./vec4-zzTQ7O0s.js";async function S(t,o,r){await Promise.resolve(),s(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),o);return i.transform=null,i}export{S as convertMeshVertexSpace};
