import{ac as p,a7 as m,aO as s}from"./index-BuurUjNy.js";import{p as a}from"./MeshVertexAttributes-Ccd0U7Co.js";import{B as n}from"./vertexSpaceConversion-Cyco_AuL.js";import"./meshProperties-C4iW0Ukm.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./spatialReferenceEllipsoidUtils-B4Hav144.js";import"./computeTranslationToOriginAndRotation-CdTRRE4h.js";import"./projectPointToVector-CycyCHNm.js";import"./meshVertexSpaceUtils-DeJZdyiY.js";import"./MeshLocalVertexSpace-BMUeMy-Q.js";import"./vec3-Du_Awc2F.js";import"./BufferView-zAxR52uW.js";import"./vec4-BNdE_iON.js";async function M(t,o,r){await Promise.resolve(),p(r);const e=n(t,o,{useEllipsoid:r==null?void 0:r.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),o);return i.transform=null,i}export{M as convertMeshVertexSpace};
