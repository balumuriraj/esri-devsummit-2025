import{eY as v,ft as S,ac as c,eZ as w,d_ as m,dZ as b,dX as k,fv as E,eN as C,ba as F,fw as $,c0 as P,fx as y,b7 as A,c1 as G,fy as I,dQ as H,eI as O,aL as a,aM as l,aN as R}from"./index-BuurUjNy.js";import{t as Z}from"./memoize-DmxaQ-k8.js";import{a as x}from"./FeatureMetadata-DHjLLq4R.js";import{s as L}from"./featureConversionUtils-CBlorucq.js";import{s as z}from"./OptimizedFeatureSet-DWrxeG6N.js";import{u as M,f as N}from"./executeQueryForSnapping-BMrwN3MM.js";import{L as W}from"./QueryEngine-gw3_eh-j.js";import{y as j,E as q,h as T}from"./SketchOptions-D7tOgciG.js";import{o as J,i as U}from"./queryEngineUtils-CNpsvbaW.js";import{i as g,r as B,n as f}from"./symbologySnappingCandidates-COQkF4S9.js";import"./dataViewUtils-TvsUr7hm.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./BoundingBox-j-OHa0PB.js";import"./UpdateTracking2D-C6bLgmat.js";import"./queryUtils-DnEZcHAW.js";import"./json-Wa8cmqdu.js";import"./timeSupport-wEUOQSqn.js";import"./OptimizedGeometry-ctYdNoIG.js";import"./memoryEstimations-CMT4SzJ5.js";import"./TimeOnly-3THQQ8Fr.js";import"./CIMSymbolHelper-C_-iIFr_.js";import"./BidiEngine-QXap_35O.js";import"./fontUtils-DmUOgodR.js";import"./Rect-BgwV4lPu.js";import"./rasterizingUtils-DZu30vQ7.js";import"./floatRGBA-CkSho6R2.js";import"./quantizationUtils-BdN41_Xc.js";import"./PooledRBush-Ce0wI0lb.js";import"./optimizedFeatureQueryEngineAdapter-Bd82a8MA.js";import"./WhereClauseCache-DySf_V0x.js";import"./WhereClause-tNfuElsK.js";import"./QueryEngineCapabilities-B_pTbIiR.js";import"./utils-5HDDUgPm.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-BGAbcxrt.js";import"./geodesicUtils-2qEj9b_s.js";import"./plane-BkVanVBa.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DLWu6eKr.js";import"./projectVectorToVector-CXD7MfO-.js";import"./projectPointToVector-CycyCHNm.js";import"./RouteLayerInteraction-CLfXoqFF.js";import"./GraphicsLayer-DoTJE-Vj.js";import"./RouteLayerView2D-DhLx2Fpf.js";import"./LayerView-CQVnlvN8.js";import"./Container-DSpu0Eal.js";import"./GraphicContainer-C5vOLOnx.js";import"./AGraphicContainer-BDJOr37h.js";import"./TechniqueInstance-kKLNFxbl.js";import"./FramebufferObject-B1BskXlu.js";import"./VertexArrayObject-D8BUTeor.js";import"./TileContainer-5EG0iL3t.js";import"./WGLContainer-LmHVZ1Cq.js";import"./ProgramTemplate-CamO9WjC.js";import"./vec3f32-nZdmKIgz.js";import"./config-CIMzMD-H.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-CQ9Aznlk.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-BBarpPRO.js";import"./ShaderBuilder-BhBi3jJv.js";import"./BindType-BBwFZqyN.js";import"./QueueProcessor-BinXpWME.js";import"./GraphicsView2D-ByVIaOBj.js";import"./OverrideHelper-CGqrUmI_.js";import"./dehydratedFeatures-sbejWfdQ.js";import"./VertexSnappingCandidate-BmaGHfmB.js";import"./PointSnappingHint-BfA-sRbc.js";const _="graphics-collections";let n=class extends v{get updating(){return this._updatingHandles.updating}get _hasZ(){const t=this.view;return t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes"}get _snappingElevationAligner(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d";if(!i||e.type==="map-notes")return g();const o=async(r,s)=>(await S(t.whenLayerView(e),s)).elevationAlignPointsInFeatures(r,s);return g(i,{elevationInfo:e.elevationInfo,alignPointsInFeatures:o})}get _snappingElevationFilter(){const{view:t}=this,e=t!=null&&t.type==="3d"&&this.layerSource.layer.type!=="map-notes";return B(e)}get _symbologySnappingFetcher(){const{view:t}=this,{layer:e}=this.layerSource,i=t!=null&&t.type==="3d",o=this._extrudedPolygonSymbolsCount>0;return i&&e.type!=="map-notes"&&o?f(o,async(r,s)=>{const p=await t.whenLayerView(e);return c(s),p.queryForSymbologySnapping({candidates:r,spatialReference:t.spatialReference},s)}):f()}constructor(t){super(t),this.availability=1,this._sources={multipoint:null,point:null,polygon:null,polyline:null},this._loadedWkids=new Set,this._loadedWkts=new Set,this._pendingAdds=[],this._extrudedPolygonSymbolsCount=0,this._updatingHandles=new w,this._memoizedMakeGetGroundElevation=Z(U)}destroy(){for(const t of this._pendingAdds)t.task.abort();this._pendingAdds.length=0,this._mapSources(t=>this._destroySource(t)),this._updatingHandles.destroy()}initialize(){this._updatingHandles.add(()=>this.getGraphicsLayers(),i=>{this._updatingHandles.removeHandles(_);for(const o of i)this._addMany(o.graphics.toArray()),this.addHandles([o.on("graphic-update",r=>this._onGraphicUpdate(r)),this._updatingHandles.addOnCollectionChange(()=>o.graphics,r=>this._onGraphicsChanged(r))],_)},m);const{view:t}=this,{layer:e}=this.layerSource;t!=null&&t.type==="3d"&&e.type!=="map-notes"&&t.elevationProvider&&this.addHandles([t.elevationProvider.on("elevation-change",({context:i})=>{j(i,e.elevationInfo)&&this._snappingElevationAligner.notifyElevationSourceChange()}),b(()=>e.elevationInfo,()=>this._snappingElevationAligner.notifyElevationSourceChange(),m),k(()=>e,["edits","apply-edits","graphic-update"],()=>this._symbologySnappingFetcher.notifySymbologyChange())])}async fetchCandidates(t,e){const{point:i,coordinateHelper:{spatialReference:o}}=t,r=await E(this._mapSources(d=>this._fetchCandidatesForSource(d,t,e)));c(e);const s=this._memoizedMakeGetGroundElevation(this.view,o),p=r.flat().map(d=>J(d,s));return q(i,p),p}async _fetchCandidatesForSource(t,e,i){var u;const o=T(e,((u=this.view)==null?void 0:u.type)??"2d"),r=await M(t.queryEngine,o,i);c(i);const s=await this._snappingElevationAligner.alignCandidates(r.candidates,e.coordinateHelper.spatialReference,i);c(i);const p=await this._symbologySnappingFetcher.fetch(s,i);c(i);const d=p.length===0?s:[...s,...p];return this._snappingElevationFilter.filter(o,d)}refresh(){}_onGraphicUpdate(t){if(this.getGraphicsLayers().some(e=>e.graphics.includes(t.graphic)))switch(t.property){case"geometry":case"visible":this._remove(t.graphic),this._addMany([t.graphic])}}_onGraphicsChanged(t){for(const e of t.removed)this._remove(e);this._addMany(t.added)}_addMany(t){const e=[],i=new Map;for(const o of t)o.geometry!=null&&(this._needsInitializeProjection(o.geometry.spatialReference)?(e.push(o.geometry.spatialReference),i.set(o.uid,o)):this._add(o));this._createPendingAdd(e,i)}_createPendingAdd(t,e){if(!t.length)return;const i=C(async s=>{await F(t.map(p=>({source:p,dest:this.spatialReference})),{signal:s}),this._markLoadedSpatialReferences(t);for(const p of e.values())this._add(p)});this._updatingHandles.addPromise(i.promise);const o={task:i,graphics:e},r=()=>$(this._pendingAdds,o);i.promise.then(r,r),this._pendingAdds.push(o)}_markLoadedSpatialReferences(t){for(const e of t){e.wkid!=null&&this._loadedWkids.add(e.wkid);const i=e.wkt2||e.wkt;i&&this._loadedWkts.add(i)}}_add(t){if(t.geometry==null||!t.visible)return;let e=t.geometry;if(e.type==="mesh")return;e.type==="extent"&&(e=P.fromExtent(e));const i=this._ensureSource(e.type);if(i==null)return;const o=this._createOptimizedFeature(t.uid,e);o!=null&&(i.featureStore.add(o),y(t.symbol)&&this._extrudedPolygonSymbolsCount++)}_needsInitializeProjection(t){if(t.wkid!=null&&this._loadedWkids.has(t.wkid))return!1;const e=t.wkt2||t.wkt;return(!e||!this._loadedWkts.has(e))&&!A(t,this.spatialReference)}_createOptimizedFeature(t,e){const i=G(x(e),this.spatialReference);if(!i)return null;const o=this._ensureGeometryHasZ(i),r=L(o,this._hasZ,!1);return new z(r,{[h]:t},null,t)}_ensureGeometryHasZ(t){if(!this._hasZ)return t;const e=o=>{for(;o.length<3;)o.push(0)},i=t.clone();switch(i.hasZ=!0,i.type){case"point":i.z=i.z??0;break;case"multipoint":i.points.forEach(e);break;case"polyline":i.paths.forEach(o=>o.forEach(e));break;case"polygon":i.rings.forEach(o=>o.forEach(e))}return i}_ensureSource(t){const e=this._sources[t];if(e!=null)return e;const i=this._createSource(t);return this._sources[t]=i,i}_createSource(t){const e=I.toJSON(t),i=this._hasZ,o=new N({geometryType:e,hasZ:i,hasM:!1});return{featureStore:o,queryEngine:new W({featureStore:o,fieldsIndex:O.fromLayerJSON({fields:[{name:h,type:"esriFieldTypeOID",alias:h}]}),geometryType:e,hasM:!1,hasZ:i,objectIdField:h,spatialReference:this.spatialReference,priority:H.SNAPPING,scheduler:this.view!=null&&this.view.type==="3d"?this.view.resourceController.scheduler:null}),type:t}}_remove(t){this._mapSources(e=>this._removeFromSource(e,t));for(const e of this._pendingAdds)e.graphics.delete(t.uid),e.graphics.size===0&&e.task.abort()}_removeFromSource(t,e){const i=e.uid;t.featureStore.has(i)&&(t.featureStore.removeById(e.uid),y(e.symbol)&&this._extrudedPolygonSymbolsCount--)}_destroySource(t){t.queryEngine.destroy(),this._sources[t.type]=null}_mapSources(t){const{point:e,polygon:i,polyline:o,multipoint:r}=this._sources,s=[];return e!=null&&s.push(t(e)),i!=null&&s.push(t(i)),o!=null&&s.push(t(o)),r!=null&&s.push(t(r)),s}};a([l()],n.prototype,"getGraphicsLayers",void 0),a([l({constructOnly:!0})],n.prototype,"layerSource",void 0),a([l({constructOnly:!0})],n.prototype,"spatialReference",void 0),a([l({constructOnly:!0})],n.prototype,"view",void 0),a([l({readOnly:!0})],n.prototype,"updating",null),a([l({readOnly:!0})],n.prototype,"availability",void 0),a([l()],n.prototype,"_hasZ",null),a([l()],n.prototype,"_snappingElevationAligner",null),a([l()],n.prototype,"_snappingElevationFilter",null),a([l()],n.prototype,"_symbologySnappingFetcher",null),a([l()],n.prototype,"_extrudedPolygonSymbolsCount",void 0),n=a([R("esri.views.interactive.snapping.featureSources.GraphicsSnappingSource")],n);const h="OBJECTID";export{n as GraphicsSnappingSource};
