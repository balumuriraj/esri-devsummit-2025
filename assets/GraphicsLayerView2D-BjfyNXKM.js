import{fb as m,fc as c,aK as g,aI as n,b5 as l,bb as h,f5 as d,i as o,k as w,o as u}from"./CodeBlock-DBIw63CI.js";import{S as y,y as V}from"./LayerView-YA8wSiVK.js";import{t as f}from"./GraphicContainer-D_qdEYjN.js";import{A as v}from"./GraphicsView2D-DK0gBibD.js";import"./index-BYYG-xAB.js";import"./Container-x89fyags.js";import"./AGraphicContainer-DwsUBWMH.js";import"./TechniqueInstance-CmRvKFpA.js";import"./UpdateTracking2D-Br9ARBEi.js";import"./BidiEngine-QXap_35O.js";import"./OptimizedFeature-C7vq2Etq.js";import"./memoryEstimations-DG877__o.js";import"./GeometryUtils-Ch14S3AO.js";import"./rasterizingUtils-Bc4FWBLI.js";import"./floatRGBA-CDUMruOZ.js";import"./Rect-CUzevAry.js";import"./dataViewUtils-CGHlXXI8.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-gEuafnU1.js";import"./VertexArrayObject-BmXtwjFc.js";import"./TileContainer-BxgtgF3u.js";import"./WGLContainer-BYNe9OD0.js";import"./ProgramTemplate-Br6yXss1.js";import"./vec3f32-nZdmKIgz.js";import"./StyleDefinition-HxXsm-Xd.js";import"./config-BOD8--da.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-CKmftsHB.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./FeatureCommandQueue-DxUg9yxe.js";import"./TechniqueType-uMFRS8dR.js";import"./GraphShaderModule-Ba_c0bzY.js";import"./ShaderBuilder-DxiCVdKy.js";import"./BindType-BBwFZqyN.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-CBzgR4ao.js";import"./OverrideHelper-GjTtBnhH.js";import"./colorUtils-DOBXNfxS.js";import"./quantizationUtils-yHnQ7Pvp.js";import"./FeatureMetadata-CC_AKrUe.js";import"./queryUtils-B4LAuMaE.js";import"./json-Wa8cmqdu.js";import"./timeSupport-DNVL_oH4.js";import"./TimeOnly-tuNXHBy1.js";import"./mat3f64-q3fE-ZOt.js";import"./normalizeUtilsSync-Dar89aqk.js";import"./dehydratedFeatures-DCsRT9se.js";let p=class extends y(V){attach(){this.graphicsView=new v({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new f(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),m(()=>{var i;return(i=this.layer)==null?void 0:i.visible},()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()})]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map(t=>({type:"graphic",graphic:t,mapPoint:i,layer:this.layer})):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,t){let r;typeof i=="number"?r=[i]:i instanceof g?r=[i.uid]:Array.isArray(i)&&i.length>0?r=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):n.isCollection(i)&&i.length>0&&(r=i.map(s=>s&&s.uid).toArray());const e=r==null?void 0:r.filter(l);if(!(e!=null&&e.length))return h();const a=(t==null?void 0:t.name)??d;return this._addHighlights(e,a),h(()=>!this.destroyed&&this._removeHighlights(e,a))}_processHighlight(){var t;const i=this._getHighlights();(t=this.graphicsView)==null||t.setHighlight(i)}};o([w()],p.prototype,"graphicsView",void 0),p=o([u("esri.views.2d.layers.GraphicsLayerView2D")],p);const di=p;export{di as default};
