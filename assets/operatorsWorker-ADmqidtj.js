const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/disjointOperator-DHGFcZM5.js","assets/ProjectionTransformation-BKvJQgia.js","assets/SimpleGeometryCursor-B92kdZ15.js","assets/index-BdTzoSyX.js","assets/index-4rsQkLC1.css","assets/jsonConverter-EM0Ttrbp.js","assets/intersectsOperator-DNjnyhyv.js","assets/OperatorIntersects-Cyf_X-9B.js","assets/touchesOperator--wD4-7Z3.js","assets/OperatorTouches-DhF3yOQ5.js","assets/crossesOperator-Ca3ey2CG.js","assets/OperatorCrosses-C6tkU4yA.js","assets/withinOperator-BI692-P7.js","assets/OperatorWithin-LmFy0UJa.js","assets/containsOperator-BLiAt9JZ.js","assets/overlapsOperator-DJ3AL0DM.js","assets/OperatorOverlaps-kNyk0dTL.js","assets/OperatorGeodeticLength-D3yxlBzD.js","assets/MapImageLayer-CHdASjC1.js","assets/QueryTask-BY8PYNl6.js","assets/query-DTCy_sKP.js","assets/pbfQueryUtils-Cw1Em5WI.js","assets/pbf-B4ErtKXZ.js","assets/memoryEstimations-yxcmaqK-.js","assets/OptimizedGeometry-DUXeneY0.js","assets/OptimizedFeatureSet-CxP_3D9q.js","assets/executeQueryJSON-BS_Mz775.js","assets/featureConversionUtils-XqvjyuvE.js","assets/SceneLayerWorker-DZSQRrH9.js","assets/MeshLocalVertexSpace-CZc8Xjwc.js","assets/vec3-rxgYcXg5.js","assets/projectVectorToVector-CoNH-8LJ.js","assets/projectPointToVector-Dls3xE4T.js","assets/sphere-B55dYDXm.js","assets/mat3f64-q3fE-ZOt.js","assets/plane-DHJlmW9S.js","assets/mat4f64-Dk4dwAN8.js","assets/quatf64-aQ5IuZRd.js","assets/I3SBinaryReader-Cq-8UfYu.js","assets/VertexAttribute-Cq4MnHjR.js","assets/edgeUtils-DWr_JZCz.js","assets/floatRGBA-CRwdEw7G.js","assets/NormalAttribute.glsl-CqEUtZ7y.js","assets/glsl-BH37Aalp.js","assets/ShaderOutput-DnYY5J1_.js","assets/BindType-BBwFZqyN.js","assets/orientedBoundingBox-BjAymS4p.js","assets/quat-Dom6TVY_.js","assets/spatialReferenceEllipsoidUtils-CgkZzaUj.js","assets/computeTranslationToOriginAndRotation-CkrVPguw.js","assets/popupUtils-DvQxtH2k.js","assets/associatedFeatureServiceUtils-CoQHrjiX.js","assets/SketchOptions-CKVMGdcO.js","assets/geodesicUtils-Dz6jG4dz.js","assets/utils-DJ1i1Qab.js","assets/quantizationUtils-6FyEi_tz.js","assets/FeatureLayerSource-uapCPLzm.js","assets/meshVertexSpaceUtils-MbpvQ4dC.js","assets/External-BfeX_35b.js","assets/MeshTransform-PLs3wxGa.js","assets/axisAngleDegrees-mfWA-kSc.js","assets/editingSupport-DGgaUnlR.js","assets/clientSideDefaults-DHOaSwC0.js","assets/QueryEngineCapabilities-B_pTbIiR.js","assets/layersCreator-CJlwxMg6.js","assets/loadUtils-BzUT0l6f.js","assets/fetchService-DWuGqzM5.js","assets/lazyLayerLoader-BITN9tTr.js","assets/portalLayers-CP2YMZuK.js","assets/saveUtils-CIpoQliA.js","assets/multiOriginJSONSupportUtils-C0wm8_Yw.js","assets/ImageryTileLayerView2D-CSuHeCGw.js","assets/RasterVFDisplayObject-CZbkUFjc.js","assets/VertexArrayObject-BH4ZShR1.js","assets/VertexElementDescriptor-BLyltQyJ.js","assets/dataUtils-C_AUXFJ-.js","assets/WGLContainer-DCAN0504.js","assets/dataViewUtils-D7BYJB-l.js","assets/BoundingBox-6hL32D3p.js","assets/ProgramTemplate-BQLYVZsh.js","assets/vec3f32-nZdmKIgz.js","assets/Container-DQXD8zjD.js","assets/config-t1u2RPtY.js","assets/earcut-D9gy186-.js","assets/LayerView-vwH2wZOT.js","assets/rasterUtils-DJA04KKO.js","assets/VertexStream-rw799wV8.js","assets/utils-p_uf9qDu.js","assets/FramebufferObject-BK8N5lb-.js","assets/TileContainer-D4zOqkhR.js","assets/rasterProjectionHelper-Bt6qacZJ.js","assets/timeSupport-DJ6-xdPr.js","assets/RefreshableLayerView-AyYBLLLh.js","assets/RasterWorker-LEX990EB.js","assets/_commonjsHelpers-DCkdB7M8.js","assets/ElevationLayer-DPtaWVJ6.js","assets/WorkerHandle-B6monv5U.js","assets/editingTools-DYMAQWRy.js","assets/interfaces-D1wMLz3p.js","assets/VerticalOffset.glsl-Do7sLNAa.js","assets/Indices-S4f2KV2z.js","assets/InterleavedLayout-BvgMmFLI.js","assets/BufferView-CSryOQvR.js","assets/triangle-Ca__qMMn.js","assets/lineSegment-C63vgSYT.js","assets/renderState-u5p2QFdT.js","assets/boundedPlane-DfxhtRJn.js","assets/requestImageUtils-Bl5Lbjug.js","assets/TextureFormat-1mYWTFa-.js","assets/ShaderBuilder-CnIoMUpN.js","assets/triangulationUtils-Do_GUbm0.js","assets/deduplicate-YFCzGLHs.js","assets/RibbonLine.glsl-DO92ENQp.js","assets/HUDVisibility.glsl-C3fiEU_9.js","assets/doublePrecisionUtils-B0owpBza.js","assets/hydratedFeatures-DAj45_sS.js","assets/Octree-DsVO5QJf.js","assets/HUDMaterial.glsl-70db8n-i.js","assets/NestedMap-GuqgquCN.js","assets/RouteLayerInteraction-BIXOdr2B.js","assets/GraphicsLayer-DC5Hy3Bb.js","assets/RouteLayerView2D-B7pXZsBc.js","assets/GraphicContainer-KZjQC03b.js","assets/AGraphicContainer-CPWMftxI.js","assets/TechniqueInstance-CZ-lgMme.js","assets/UpdateTracking2D-mUe-prLO.js","assets/FeatureCommandQueue-CwACke_k.js","assets/CIMSymbolHelper-C_OOYmQh.js","assets/BidiEngine-QXap_35O.js","assets/fontUtils-DgOdrfM2.js","assets/Rect-Dkdvd_ov.js","assets/rasterizingUtils-Dvw_VRMk.js","assets/TechniqueType-uMFRS8dR.js","assets/GraphShaderModule-Amx3nJDj.js","assets/QueueProcessor-f1haG1Sz.js","assets/GraphicsView2D-DOSdlu2c.js","assets/OverrideHelper-D9SPx1Lm.js","assets/FeatureMetadata-BxBLpuNq.js","assets/queryUtils-DfIvwoZF.js","assets/json-Wa8cmqdu.js","assets/timeSupport-BcX1tAH4.js","assets/TimeOnly-JrFYyWLq.js","assets/dehydratedFeatures-WjlQ19Kf.js","assets/automaticLengthMeasurementUtils-HPnqEU_u.js","assets/memoize-DmxaQ-k8.js","assets/geodesicLengthMeasurementUtils-iVRcDTyA.js","assets/geometryEngineBase-B0ZyeKAX.js","assets/hydrated-Bmn8dDoA.js","assets/glUtil-BpQCKi7W.js","assets/automaticAreaMeasurementUtils-CMpQirsd.js","assets/PointSnappingHint-wC-zCGSN.js","assets/editPlaneUtils-DplA7xyq.js","assets/ReactiveSet-BWWkfb3K.js","assets/SelectedVertexTooltipInfo-YwXVk6Gb.js","assets/TranslateTooltipInfo-DyB7SV6x.js","assets/ExtentScaleTooltipInfo-DOVm6Nfi.js","assets/GraphicManipulator-iJVi4sO-.js","assets/drapedUtils-BxvBHqvh.js","assets/KMLLayerView2D-K86dLvHI.js","assets/BitmapTechnique-BE1d4tFl.js","assets/BitmapContainer-BI1FgNfR.js","assets/MaterialPrograms-D5NInDJS.js","assets/webglDeps-CHHEULMX.js","assets/testSVGPremultipliedAlpha-Cxf33MbL.js","assets/FeatureLayerView2D-CSpUOmRW.js","assets/AttributeBinsFeatureSet-BCFOQXfl.js","assets/AttributeBinsQuery-FpBcv0UY.js","assets/FixedIntervalBinParameters-Dkr3Au9S.js","assets/CircularArray-CujHzHWW.js","assets/SDFHelper-aoTw5THR.js","assets/parquet-BM8wJJsw.js","assets/knowledgegraph-Df1xNS_e.js","assets/arcade-CBXoZ1_E.js","assets/unitConversion-CwFVEmQE.js","assets/ImmutableArray-BPVd6ESQ.js","assets/shared-BFeLzSXM.js","assets/number-DZuUqiTo.js","assets/WhereClause-CsqVDoUQ.js","assets/portalUtils-CNsT-y1P.js","assets/executeQueryForSnapping-oYJgckhP.js","assets/PooledRBush-CmqztgZz.js","assets/optimizedFeatureQueryEngineAdapter-fvnFawcm.js","assets/QueryEngine-BDaupG1V.js","assets/WhereClauseCache-BE_9y_nR.js","assets/SnappingCandidate-DGkpYqI6.js","assets/MemorySourceWorker-DUuyr6Xl.js","assets/sourceUtils-d6IgwRB1.js","assets/date-Ctp1FiBW.js","assets/MediaLayerView2D-CJz_ffBn.js","assets/enums-BRzLM11V.js","assets/GridShader-BnpO35uT.js","assets/PieChartMeshWriter-GQj5SWh7.js","assets/libtess-DGxeM0vd.js","assets/utils-y65c3gnY.js","assets/grouping-J3Lh5DN4.js","assets/OverlayContainer-I_njHRfm.js","assets/utils-ehcGqGxa.js","assets/FeaturePipelineWorker-1G2Fc4Gy.js","assets/MeshWriterRegistry-DOBFMG54.js","assets/operatorGeodeticDensify-BMkhEDvi.js","assets/geodeticCurveType-CirnHLSB.js","assets/geojson-BYG4eI-c.js","assets/PointCloudWorker-6eg_vNXB.js","assets/uploadAssets-T_pFqwHB.js","assets/meshFeatureAttributes-6ZTnpIxu.js","assets/SourceLayerData-BmOdsy--.js","assets/VideoLayerView2D-B2e0Mudn.js","assets/webdocSaveUtils-BKIo0j41.js","assets/basemapUtils-CMmsNt_c.js","assets/resourceUtils-Ciuy2Wq4.js","assets/WFSSourceWorker-CTexPelQ.js","assets/WMSLayerView2D-4jj5ugad.js","assets/ExportStrategy-WnBucwZ1.js","assets/operators-DztraDEy.js","assets/apiConverter-CapvnbKP.js","assets/operatorGeodesicBuffer-AiSbAtGl.js","assets/operatorBuffer-C-V_neyJ.js","assets/GeometryCleaner-BEJM7I4l-0ankUTf1.js","assets/operatorConvexHull-Ck1DXmbX.js","assets/operatorIntersection-DrFaEnNF.js","assets/operatorOffset-DR-IdO2K.js","assets/operatorSimplify-BkqH1ebP.js","assets/operatorUnion-FPI5b0Uj.js","assets/MeshComponent-B2-M1acy.js","assets/meshProperties-C4iW0Ukm.js","assets/MeshVertexAttributes-BLZ2WxAC.js","assets/vec4-ueQh84B4.js","assets/loader-Bttkx4gJ.js","assets/objectResourceUtils-D3WY8JDL.js","assets/RealisticTree.glsl-eylmpLec.js","assets/vertexSpaceConversion-DBS45AQ3.js","assets/featureLayerUtils-Czbtdp2r.js","assets/intersectionOperator-D1Uqm58d.js","assets/unionOperator-Cp4wgNre.js","assets/lengthOperator-B1KFlvU0.js","assets/bufferOperator-NlnWyJc6.js","assets/geodesicBufferOperator-BKospNvk.js","assets/offsetOperator-DwXl4diL.js","assets/simplifyOperator-HYMEXyc7.js","assets/convexHullOperator-bH9bXZ0t.js"])))=>i.map(i=>d[i]);
import{bZ as a,cV as c}from"./index-BdTzoSyX.js";function _(t,e){let o;return{loaded:!1,load:()=>o??(o=e().then(n=>{p[t]={loaded:!0,execute:n}}))}}function s(t){return t==null?null:t.toJSON()}const p={disjoint:_("disjoint",()=>a(()=>import("./disjointOperator-DHGFcZM5.js"),__vite__mapDeps([0,1,2,3,4,5])).then(t=>t.execute)),intersects:_("intersects",()=>a(()=>import("./intersectsOperator-DNjnyhyv.js"),__vite__mapDeps([6,7,1,2,3,4,5])).then(t=>t.execute)),touches:_("touches",()=>a(()=>import("./touchesOperator--wD4-7Z3.js"),__vite__mapDeps([8,9,1,2,3,4,5])).then(t=>t.execute)),crosses:_("crosses",()=>a(()=>import("./crossesOperator-Ca3ey2CG.js"),__vite__mapDeps([10,11,1,2,3,4,5])).then(t=>t.execute)),within:_("within",()=>a(()=>import("./withinOperator-BI692-P7.js"),__vite__mapDeps([12,13,1,2,3,4,5])).then(t=>t.execute)),contains:_("contains",()=>a(()=>import("./containsOperator-BLiAt9JZ.js"),__vite__mapDeps([14,1,2,3,4,5])).then(t=>t.execute)),overlaps:_("overlaps",()=>a(()=>import("./overlapsOperator-DJ3AL0DM.js"),__vite__mapDeps([15,16,1,2,3,4,5])).then(t=>t.execute)),equals:_("equals",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.J),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o))}),relate:_("relate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.$),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>t.execute(c(e),c(o),n)}),intersection:_("intersection",()=>a(()=>import("./intersectionOperator-D1Uqm58d.js"),__vite__mapDeps([232,3,4,219,2,1,5])).then(t=>t.execute)),union:_("union",()=>a(()=>import("./unionOperator-Cp4wgNre.js"),__vite__mapDeps([233,222,2,1,3,4,5])).then(t=>t.executeMany)),difference:_("difference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.F),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),symmetricDifference:_("symmetricDifference",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.a0),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),clip:_("clip",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>s(t.execute(c(e),c(o)))}),cut:_("cut",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.A),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>t.execute(c(e),c(o)).map(n=>s(n))}),area:_("area",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(n=>n.x),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toAreaUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toAreaUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toAreaUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(c(n));return e(n.spatialReference,o(r),i)}}),geodeticArea:_("geodeticArea",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(r=>r.Q),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,squareMeters:o,toAreaUnit:n}=await a(async()=>{const{convert:r,squareMeters:i,toAreaUnit:u}=await import("./unitConversion-CwFVEmQE.js").then(E=>E.e);return{convert:r,squareMeters:i,toAreaUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),length:_("length",async()=>{const t=await a(()=>import("./lengthOperator-B1KFlvU0.js"),__vite__mapDeps([234,3,4,5,1,2])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r)=>{const i=t.execute(n);return e(n.spatialReference,o(r),i)}}),geodeticLength:_("geodeticLength",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(r=>r.Y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-CwFVEmQE.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i)=>{const u=t.execute(c(r));return e(o,n(i),u)}}),distance:_("distance",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(n=>n.H),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertFromSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertFromSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertFromSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>{const u=t.execute(c(n),c(r));return e(n.spatialReference,o(i),u)}}),densify:_("densify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(n=>n.E),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r)))}),geodeticDensify:_("geodeticDensify",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(r=>r.X),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-CwFVEmQE.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),s(t.execute(c(r),i)))}),generalize:_("generalize",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(n=>n.N),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),s(t.execute(c(n),r,u)))}),buffer:_("buffer",async()=>{const t=await a(()=>import("./bufferOperator-NlnWyJc6.js"),__vite__mapDeps([235,3,4,216,2,1,217,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r))}),geodesicBuffer:_("geodesicBuffer",async()=>{const t=await a(()=>import("./geodesicBufferOperator-BKospNvk.js"),__vite__mapDeps([236,3,4,215,2,200])),{convert:e,meters:o,toLengthUnit:n}=await a(async()=>{const{convert:r,meters:i,toLengthUnit:u}=await import("./unitConversion-CwFVEmQE.js").then(E=>E.e);return{convert:r,meters:i,toLengthUnit:u}},__vite__mapDeps([173,3,4]));return await t.load(),(r,i,u)=>(i=e(n(u),o,i),t.execute(r,i))}),offset:_("offset",async()=>{const t=await a(()=>import("./offsetOperator-DwXl4diL.js"),__vite__mapDeps([237,3,4,220,2,1,5])),{convertToSpatialReferenceUnit:e,toLengthUnit:o}=await a(async()=>{const{convertToSpatialReferenceUnit:n,toLengthUnit:r}=await import("./unitConversion-CwFVEmQE.js").then(i=>i.e);return{convertToSpatialReferenceUnit:n,toLengthUnit:r}},__vite__mapDeps([173,3,4]));return(n,r,i,u)=>(r=e(o(i),n.spatialReference,r),t.execute(n,r,u))}),rotate:_("rotate",async()=>{const t=await a(()=>import("./operators-DztraDEy.js").then(o=>o.Z),__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13])),{default:e}=await a(async()=>{const{default:o}=await import("./operators-DztraDEy.js").then(n=>n.Y);return{default:o}},__vite__mapDeps([213,3,4,2,1,214,5,215,200,199,216,217,218,11,219,7,220,16,221,9,222,13]));return(o,n,r,i)=>{const u=new e().rotate(n,r,i);return s(t.execute(c(o),u))}}),centroid:_("centroid",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.y),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),labelPoint:_("labelPoint",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e.Z),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return e=>s(t.execute(c(e)))}),simplify:_("simplify",()=>a(()=>import("./simplifyOperator-HYMEXyc7.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.execute)),isSimple:_("isSimple",()=>a(()=>import("./simplifyOperator-HYMEXyc7.js"),__vite__mapDeps([238,221,2,1,3,4,5])).then(t=>t.isSimple)),convexHull:_("convexHull",()=>a(()=>import("./convexHullOperator-bH9bXZ0t.js"),__vite__mapDeps([239,218,2,1,3,4,5])).then(t=>t.execute)),getNearestCoordinate:_("getNearestCoordinate",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e._),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o,n)=>{const r=t.getNearestCoordinate(c(e),c(o),n);return{...r,coordinate:s(r.coordinate)}}}),getNearestVertex:_("getNearestVertex",async()=>{const t=await a(()=>import("./OperatorGeodeticLength-D3yxlBzD.js").then(e=>e._),__vite__mapDeps([17,3,4,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,2,200,201,202,203,204,205,206,207,208,209,210,211,212,1,5,213,214,215,216,217,218,11,219,7,220,16,221,9,222,13,223,224,225,226,227,228,229,230,231]));return(e,o)=>{const n=t.getNearestVertex(c(e),c(o));return{...n,coordinate:s(n.coordinate)}}})};function d(t,e){const o=p[t];return o.loaded?o.execute.apply(void 0,e):o.load().then(()=>d(t,e))}export{d as invokeGeometryOp};
